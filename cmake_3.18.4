version=$2
enter_remote_archive "cmake-${version}" "https://github.com/Kitware/CMake/releases/download/v3.18.4/cmake-${version}.tar.gz" "cmake-${version}.tar.gz" "tar xf ARCHIVE_FILENAME"

# Usage: ./bootstrap [<options>...] [-- <cmake-options>...]
# Options: [defaults in brackets after descriptions]
# Configuration:
#   --help                  print this message
#   --version               only print version information
#   --verbose               display more information
#   --parallel=n            bootstrap cmake in parallel, where n is
#                           number of nodes [1]
#   --enable-ccache         Enable ccache when building cmake
#   --init=FILE             load FILE as script to populate cache
#   --system-libs           use all system-installed third-party libraries
#                           (for use only by package maintainers)
#   --no-system-libs        use all cmake-provided third-party libraries
#                           (default)
#   --system-curl           use system-installed curl library
#   --no-system-curl        use cmake-provided curl library (default)
#   --system-expat          use system-installed expat library
#   --no-system-expat       use cmake-provided expat library (default)
#   --system-jsoncpp        use system-installed jsoncpp library
#   --no-system-jsoncpp     use cmake-provided jsoncpp library (default)
#   --system-zlib           use system-installed zlib library
#   --no-system-zlib        use cmake-provided zlib library (default)
#   --system-bzip2          use system-installed bzip2 library
#   --no-system-bzip2       use cmake-provided bzip2 library (default)
#   --system-liblzma        use system-installed liblzma library
#   --no-system-liblzma     use cmake-provided liblzma library (default)
#   --system-nghttp2        use system-installed nghttp2 library
#   --no-system-nghttp2     use cmake-provided nghttp2 library (default)
#   --system-zstd           use system-installed zstd library
#   --no-system-zstd        use cmake-provided zstd library (default)
#   --system-libarchive     use system-installed libarchive library
#   --no-system-libarchive  use cmake-provided libarchive library (default)
#   --system-librhash       use system-installed librhash library
#   --no-system-librhash    use cmake-provided librhash library (default)
#   --system-libuv          use system-installed libuv library
#   --no-system-libuv       use cmake-provided libuv library (default)

#   --qt-gui                build the Qt-based GUI (requires Qt >= 4.2)
#   --no-qt-gui             do not build the Qt-based GUI (default)
#   --qt-qmake=<qmake>      use <qmake> as the qmake executable to find Qt

#   --sphinx-info           build Info manual with Sphinx
#   --sphinx-man            build man pages with Sphinx
#   --sphinx-html           build html help with Sphinx
#   --sphinx-qthelp         build qch help with Sphinx
#   --sphinx-build=<sb>     use <sb> as the sphinx-build executable
#   --sphinx-flags=<flags>  pass <flags> to sphinx-build executable

# Directory and file names:
#   --prefix=PREFIX         install files in tree rooted at PREFIX
#                           [/usr/local]
#   --bindir=DIR            install binaries in PREFIX/DIR
#                           [bin]
#   --datadir=DIR           install data files in PREFIX/DIR
#                           [share/cmake-3.18]
#   --docdir=DIR            install documentation files in PREFIX/DIR
#                           [doc/cmake-3.18]
#   --mandir=DIR            install man pages files in PREFIX/DIR/manN
#                           [man]
#   --xdgdatadir=DIR        install XDG specific files in PREFIX/DIR
#                           [share]

# We may consider using the option --system-libs that should significantly reduce
# the build time.

bash bootstrap --prefix="$INSTALL_PREFIX" -- -DCMAKE_BUILD_TYPE:STRING=Release
make
make install

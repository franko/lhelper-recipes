#!/bin/bash
check_commands make grep cmp diff "$CC" "$CXX"

# Options in the array below will be disabled unless they are
# explicitly enabled.
availables=( \
    video video-opengl video-rpi video-wayland libdecor video-opengles video-opengles2 loadso render \
    audio joystick haptic hidapi sensor power filesystem misc locale timers file cpuinfo \
    dbus ibus fcitx ime assembly largefile)

# lsx and lasx are extensions for MIPS Longsoon CPU type. Not currently recorgnized
# by lhelper.
simd_availables=(mmx 3dnow ssemath sse sse2 sse3 altivec lsx lasx)
simd_enables=()

# Notes about the activation of loadso
#
# When loadso is not activated, when compiling
# using "sdl2-config" --libs to link we get the error:
# libSDL2.a(SDL_dynapi.o): undefined reference to symbol 'dlopen@@GLIBC_2.1'
# The problem is the option -ldl is required but not included by sdl2-config.
#
# In addition, when using an OPENGL window, if the loadso is not available
# the following error is given at runtime:
#
# Could not create window: Failed loading libGL.so.1: SDL_LoadObject() not implemented
#
# We activate therefore the loadso module when opengl is enabled.
#
# The module timers is very important and should be enabled whenever the
# events subsystem is used.
# If timers is disabled and SDL_PollEvent is used the application will use
# 100% of the CPU. In addition the SDL_Delay function will do nothing.
# It could be disabled if events are also disabled but this configuration
# is not currently supported.

# By default we build video, timers and events modules
enables=(assembly video events timers sdl2-config)

disables=(atomic)
audio_disables=(jack arts nas fusionsound pipewire)
video_disables=(video-{vulkan,directfb,dummy,opengles1,vivante,wayland-qt-touch})

os_audio_deps=()

case "$CPU_TYPE/$CPU_TARGET" in
    x86/i586 | x86/i686) ;;
    x86/pentium2)
        simd_enables+=(mmx);;
    x86/pentium3)
        simd_enables+=(mmx ssemath sse);;
    x86/pentium4 | x86-64/x86-64)
        simd_enables+=(mmx ssemath sse sse2);;
    x86*)
        simd_enables+=(mmx ssemath sse sse2 sse3);;
    # if we know about MIPS and Longsoon we may enable selectively LSX and LASX support
esac

if [[ "$OSTYPE" == "linux"* || "$OSTYPE" == "freebsd"* ]]; then
    dependency x11
    dependency xext
    os_audio_enables=(pulseaudio)
    os_audio_deps=(libpulse-simple samplerate) # sndio ? (configure is looking for sndio)
    os_audio_disables=(esd "${audio_disables[@]}")
    enables+=(video-x11 video-x11-{xcursor,xrandr})
    disables+=(
        "${video_disables[@]}" \
        video-x11-{xdbe,scrnsaver,xshape})
elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "mingw"* || $OSTYPE == "cygwin"* ]]; then
    os_audio_enables=(wasapi)
    os_audio_disables=("${audio_disables[@]}")
    # On windows the default video driver is directx but windib will
    # be used if directx is disabled. Windib is based on GDI32 and doesn't
    # need to be explicitly enabled with configure.
    disables+=(directx render-d3d "${video_disables[@]}")
elif [[ "$OSTYPE" == "darwin"* ]]; then
    os_audio_enables=(coreaudio)
    os_audio_disables=("${audio_disables[@]}")
    enables+=(video-cocoa video-metal file)
    disables+=(video-x11 "${video_disables[@]}")
    needs_opengl=yes
fi

options=()
while [ ! -z ${1+x} ]; do
    case $1 in
    -wayland)
        if [[ "$OSTYPE" == "linux"* ]]; then
            dependency wayland-client
            dependency wayland-scanner
            dependency wayland-egl
            dependency wayland-cursor
            dependency egl
            dependency xkbcommon
            enables+=(video-wayland libdecor)
            # Not tested if libdecor works and how.
            # Normally both opengl and opengles are needed for wayland.
            needs_opengl=yes
            needs_opengles=yes
        fi
        ;;
    -threads) ;;
    -rpi)
        if [[ "$OSTYPE" == "linux"* ]]; then
            enables+=(video-rpi)
            disables+=(video-x11)
            # Option not tested
        fi
        ;;
    -opengles)
        needs_opengles=yes
        ;;
    -audio)
        for depname in "${os_audio_deps[@]}"; do
            dependency "$depname"
        done
        enables+=(audio "${os_audio_enables[@]}")
        disables+=("${os_audio_disables[@]}")
        ;;
    -opengl)
        needs_opengl=yes
        ;;
    -joystick)
        enables+=(joystick joystick-virtual)
        if [[ "$OSTYPE" == "darwin"* ]]; then
            enables+=(joystick-mfi)
        fi
        ;;
    -largefile)
        enables+=(largefile)
        ;;
    -loadso)
        needs_loadso=yes
        ;;
    -ime)
        enables+=(ime)
        if [[ "$OSTYPE" == "linux"* ]]; then
            enables+=(dbus ibus fcitx)
        fi
        ;;
    -filesystem | -cpuinfo | -file | -render | -haptic | -sensor | -hidapi | -misc | -locale)
        enables+=("${1#-}")
        ;;
    *)
        options+=("$1")
        ;;
    esac
    shift
done

if [ ! -z ${needs_loadso+x} ]; then
    enables+=(loadso)
fi

if [ ! -z ${needs_opengles+x} ]; then
    enables+=(render video-{opengles,opengles2})
    # Currently we don't know if loadso is needed for opengles
    # like it is needed for opengl. On Windows it works fine without
    # but it should be tested on linux.
fi

if [ ! -z ${needs_opengl+x} ]; then
    enables+=(render loadso video-opengl)
fi

all_simd="${simd_enables[*]}"
for opt in "${simd_availables[@]}"; do
    if [[ " $all_simd " == *" $opt "* ]]; then
        enables+=("$opt")
    else
        disables+=("$opt")
    fi
done

all_enables="${enables[*]}"
for opt in "${availables[@]}"; do
    if [[ " $all_enables " != *" $opt "* ]]; then
        disables+=("$opt")
    fi
done

for name in "${enables[@]}"; do
    options+=("--enable-$name")
done
for name in "${disables[@]}"; do
    options+=("--disable-$name")
done

enter_archive "http://libsdl.org/release/SDL2-${version}.tar.gz"

if [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "mingw"* || $OSTYPE == "cygwin"* ]]; then
    # on windows, when using mingw64, the command "pwd -P" creates a same like /c/something/foo
    # while we need the form C:/something/foo because with GCC the include option -I require
    # this latter form. So we replace (pwd -P) with (pwd -W) to produce the desired output.
    if test -f "sdl2-config.in"; then
        sed -i 's/(pwd -P)/(pwd -W)/g' "sdl2-config.in"
    fi
fi

build_and_install configure "${options[@]}"
